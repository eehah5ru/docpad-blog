// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var SlimPlugin, TaskGroup, safeps, _ref;
    safeps = require('safeps');
    TaskGroup = require('taskgroup').TaskGroup;
    return SlimPlugin = (function(_super) {
      __extends(SlimPlugin, _super);

      function SlimPlugin() {
        _ref = SlimPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      SlimPlugin.prototype.name = 'slim';

      SlimPlugin.prototype.config = {
        pretty: false,
        bundler: false,
        environments: {
          development: {
            pretty: true
          }
        }
      };

      SlimPlugin.prototype.locale = {
        slimNotInstalled: 'Slim does not appear to be available on your system'
      };

      SlimPlugin.prototype.generateBefore = function(opts, next) {
        var config, execsNeeded, tasks;
        config = this.config;
        tasks = new TaskGroup().setConfig({
          concurrency: 0
        }).once('complete', next);
        if (config.bundler == null) {
          tasks.addTask(function(complete) {
            return safeps.getExecPath('bundle', function(err, path) {
              config.bundler = path != null;
              return complete();
            });
          });
        }
        execsNeeded = ['slimrb'];
        if (config.bundler) {
          execsNeeded.push('bundle');
        }
        execsNeeded.forEach(function(thing) {
          if (config[thing + 'Path'] == null) {
            return tasks.addTask(function(complete) {
              return safeps.getExecPath(thing, function(err, path) {
                config[thing + 'Path'] = path != null ? path : false;
                return complete();
              });
            });
          }
        });
        return tasks.run();
      };

      SlimPlugin.prototype.extendCollections = function(opts) {
        var config, docpad;
        config = this.config;
        return docpad = this.docpad;
      };

      SlimPlugin.prototype.render = function(opts, next) {
        var bundlePath, command, commandOpts, config, execPath, file, fullDirPath, inExtension, locale, outExtension;
        config = this.config;
        locale = this.locale;
        inExtension = opts.inExtension, outExtension = opts.outExtension, file = opts.file;
        if (inExtension === 'slim') {
          fullDirPath = file.get('fullDirPath');
          commandOpts = {
            stdin: opts.content
          };
          execPath = config['slimrbPath'];
          if (config.bundler) {
            bundlePath = config['bundlePath'];
          }
          if (!execPath) {
            return next(new Error(locale[inExtension + 'NotInstalled']));
          }
          command = [execPath, '--stdin'];
          if (config.pretty) {
            command.push('--pretty');
          }
          if (config.bundler) {
            command.unshift('exec');
            command.unshift(bundlePath);
          }
          return safeps.spawn(command, commandOpts, function(err, stdout, stderr, code, signal) {
            if (err) {
              return next(err);
            }
            opts.content = stdout;
            return next();
          });
        } else {
          return next();
        }
      };

      return SlimPlugin;

    })(BasePlugin);
  };

}).call(this);
